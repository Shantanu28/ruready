<?xml version="1.0" encoding="UTF-8"?>

<!--
#####################################################################################
Build file for ru2 project
Authors:
		Nava L. Livne <i>&lt;nlivne@aoce.utah.edu&gt;</i>
		Academic Outreach and Continuing Education (AOCE)
		1901 East South Campus Dr., Room 2197-E
		University of Utah, Salt Lake City, UT 84112
		
		Oren E. Livne <i>&lt;olivne@aoce.utah.edu&gt;</i>
		AOCE, Room 2197-E, University of Utah            
		University of Utah, Salt Lake City, UT 84112

		(c) 2006-07 Continuing Education , University of Utah.
		All copyrights reserved. U.S. Patent Pending DOCKET NO. 00846 25702.PROV
 
Date: September 12, 2007

Follow these steps in the main ru2 project directory:
1. Run "ant config -Dconfig.name=[your_config_name]".
3. Export database schema file: "ant ddl". This will not override the current database.
4. Use the "create2" alias to generate the new production database.
   WARNING: THIS WILL OVERRIDE CURRENT DATABASE DATA.
4. Use the "create2_test" alias to generate the new testing database.
   WARNING: THIS WILL OVERRIDE CURRENT DATABASE DATA.
5. Build and create WAR file: "ant war".
6. Deploy the WAR file on tomcat: "ant deploy".
7. Use "ant release -Dconfig.name=[your_config_name]" to create a read-to-deploy release directory
   for configuration [your_config_name]. If the property is not supplied by a command-line
   argument, it falls back to the configuration specified in build.properties.
   
#####################################################################################
-->
<project default="build" name="ru2">

	<!-- =========================== Global properties ======================================= -->

	<!-- Directories and path aliases -->
	<property file="build.properties" />
	<property name="src" location="src" />
	<property name="config" location="config" />
	<property name="bin" location="bin" />
	<property name="sql" location="sql" />
	<property name="tools" location="./data/test/lib" />
	<property name="release" location="${ant.project.name}_release" />
	<property name="tomcat" value="catalina.sh" />

	<property name="reports" location="reports" />
	<!-- ru2 library location -->
	<property name="ru2.lib" location="./WebRoot/WEB-INF/lib" />

	<!-- Compilation parameters -->
	<property name="debuglevel" value="source,lines,vars" />
	<property name="target" value="1.5" />
	<property name="source" value="1.5" />

	<!-- Set time and date of this project -->
	<tstamp>
		<format property="today" pattern="yyyyMMdd" />
	</tstamp>

	<!-- =========================== File set definitions ==================================== -->

	<!-- Configuration file directory (depends on property "config.name") -->
	<property name="config.path" location="config/${config.name}" />

	<!-- Web content directory -->
	<property name="webroot" location="WebRoot" />

	<!-- META-INF directory -->
	<property name="metainf" location="${webroot}/META-INF" />

	<!-- WEB-INF directory -->
	<property name="webinf" location="${webroot}/WEB-INF" />

	<!-- Path to store compiled class files -->
	<property name="output" location="${webinf}/classes" />

	<!-- =========================== Library classpath definitions =========================== -->

	<!-- =========================== Project classpath definitions =========================== -->

	<path id="classpath.base">
		<pathelement location="${output}" />
		<fileset dir="${ru2.lib}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${j2ee.lib}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${shared.lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="classpath.tools">
		<path refid="classpath.base" />
		<fileset dir="${tools}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- =========================== Main tasks ============================================== -->

	<target name="header">
		<echo message="============================== ${ant.project.name} =========================" />
	</target>

	<!--
	<target depends="header,checkout,deploy" name="full">
	</target>

	<target depends="update,deploy" name="fullupdate">
		<echo message="${ant.project.name}: SVN update and deployment sequence" />
	</target>
	-->

	<!-- =========================== Configuration tasks ===================================== -->

	<!--
	Makes the configuration specified by the property ${config.name} the default one
	by copying it over to build.properties
	-->
	<target name="config">
		<echo message="Configurating for '${config.name}'" />

		<echo message="Generating hibernate mapping files" />
		<exec dir="." executable="./config_hibernate" os="unix">
		</exec>

		<echo message="Copying resources" />
		<copy file="${config.path}/build.properties" tofile="./build.properties" overwrite="true" />
		<copy file="${config.path}/context.xml" tofile="./WebRoot/META-INF/context.xml" overwrite="true" />
		<copy todir="${src}" overwrite="true">
			<fileset dir="${config.path}">
				<include name="*.cfg.xml" />
			</fileset>
		</copy>

	</target>

	<!-- =========================== Subversion check out tasks ============================== -->

	<!-- Load the SVN task -->
	<!--	<taskdef resource="svntask.properties" classpathref="classpath.base" /> -->

	<!-- Check out latest version into a sub-directory with this date -->
	<target name="checkout">
		<echo message="Checking out the code into the directory ${basedir}/${today}..." />
		<mkdir dir="./${today}" />
		<!--
		<svn javahl="${javahl}" username="${svn.repository.user}" password="${svn.repository.passwd}">
			<checkout url="${svn.repository.url}" revision="HEAD" destPath="./${today}" />
		</svn>
		-->
		<exec executable="svn" output="${today}/checkout.log">
			<arg value="checkout" />
			<arg value="${svn.repository.url}" />
			<arg value="./${today}" />
			<arg value="--username" />
			<arg value="${svn.repository.user}" />
			<arg value="--non-interactive" />
		</exec>

		<echo message="Checking out done. Log file: ${basedir}/${today}/checkout.log" />
		<exec executable="tail">
			<arg value="-1" />
			<arg value="${basedir}/${today}/checkout.log" />
		</exec>

	</target>

	<!-- Update the version that exists in this directory -->
	<target name="update">
		<svn username="${svn.repository.user}" password="${svn.repository.passwd}">
			<update dir="." />
		</svn>
	</target>

	<!-- =========================== Compilation tasks ======================================= -->

	<target depends="init" name="build">
		<echo message="${ant.project.name}: ${ant.file}" />
		<javac srcdir="${src}" destdir="${output}" debug="true" debuglevel="${debuglevel}" source="${source}" target="${target}">
			<include name="**/*.java" />
			<exclude name="${svn.pattern}" />
			<classpath refid="classpath.base" />
			<compilerarg value="-Xlint:unchecked" />
			<compilerarg value="-Xlint:deprecation" />
		</javac>
	</target>

	<target name="init">
		<mkdir dir="${output}" />
		<copy includeemptydirs="false" todir="${output}">
			<fileset dir="${src}" excludes="${svn.pattern}, **/*.launch, **/*.testsuite, **/*.deploy, **/*.location, **/*.execution, **/*.datapool, **/*.artifact, **/*.html, **/*.svg, **/*.java" />
		</copy>
	</target>

	<!-- =========================== Cleaning tasks ========================================== -->

	<target name="clean">
		<delete dir="${output}" />

		<!-- Make sure no stale test case result files remain in the reports directory -->
		<delete dir="${reports}" />
		<mkdir dir="${reports}" />
	</target>

	<!-- =========================== Database schema generation tasks ======================== -->

	<taskdef name="htools" classname="org.hibernate.tool.ant.HibernateToolTask" classpathref="classpath.tools" />

	<!--
	Export database schema. DOESN'T OVERRIDE EXISTING DATA IN DATABASE ANY MORE -
	just outputs two DDL files (Hibernate-Tools-original and our fix) for both
	the production and testing databases.
	-->
	<target name="ddl" depends="build">
		<echo message="Exporting database schema" />
		<mkdir dir="${sql}" />

		<!-- Generate production database schema -->
		<htools destdir="${sql}">
			<classpath refid="classpath.base" />
			<annotationconfiguration configurationfile="${src}/hibernate_StandAlone.cfg.xml" namingstrategy="org.hibernate.cfg.ImprovedNamingStrategy" />
			<hbm2ddl create="true" drop="true" format="true" export="false" outputfilename="${ant.project.name}.ddl" haltonerror="true" />
		</htools>

		<!-- Generate test database schema -->
		<htools destdir="${sql}">
			<classpath refid="classpath.base" />
			<annotationconfiguration configurationfile="${src}/hibernate_Test.cfg.xml" namingstrategy="org.hibernate.cfg.ImprovedNamingStrategy" />
			<hbm2ddl create="true" drop="true" format="true" export="false" outputfilename="${ant.project.name}_test.ddl" haltonerror="true" />
		</htools>

		<!--
		Run an rucommon java program that creates the database schemas of
		both the production and testing databases.
		-->
		<ant target="fixddl" />
		<ant target="fixddl_test" />
	</target>

	<!--
	Run an rucommon java program that fixes the output of Hibernate Tools 
	to start a database from scratch.
	The resulting DDL file will wipe off the existing database and create
	a new database schema.
	-->
	<target name="fixddl">
		<echo message="Running DDL fixer, production database" />
		<java classname="net.ruready.eis.ddl.RunDDLFixer">
			<!-- Input DDL file to fix -->
			<arg value="${sql}/${ant.project.name}.ddl" />
			<!-- Output DDL file to write to -->
			<arg value="${sql}/${ant.project.name}.wipeoff.ddl" />
			<!-- Database name -->
			<arg value="${ant.project.name}" />

			<!-- Uses rucommon and some other dependent jars -->
			<classpath refid="classpath.base" />
		</java>
	</target>

	<!-- Creates a duplicate database for testing purposes. -->
	<target name="fixddl_test">
		<echo message="Running DDL fixer, testing database" />
		<java classname="net.ruready.eis.ddl.RunDDLFixer">
			<!-- Input DDL file to fix -->
			<arg value="${sql}/${ant.project.name}_test.ddl" />
			<!-- Output DDL file to write to -->
			<arg value="${sql}/${ant.project.name}_test.wipeoff.ddl" />
			<!-- Database name -->
			<arg value="${ant.project.name}_test" />

			<!-- Uses rucommon and some other dependent jars -->
			<classpath refid="classpath.base" />
		</java>
	</target>

	<!-- =========================== Deployment tasks ======================================== -->

	<!-- Building a WAR file -->
	<target name="war" depends="build">
		<echo message="Exporting WAR file for configuration '${config.name}'" />
		<delete file="${ant.project.name}.war" />
		<war destfile="${ant.project.name}.war" webxml="${webinf}/web.xml" excludes="**/_svn/**">
			<classes dir="${output}" excludes="${svn.pattern}" />
			<lib dir="${webinf}/lib">
				<exclude name="${svn.pattern}" />
				<exclude name="${thirdparty.classpath}" />
				<include name="*.jar" />
			</lib>
			<zipfileset dir="config" prefix="config" excludes="**/_svn/**" />
			<zipfileset dir="${webroot}/css" prefix="css" excludes="${svn.pattern}" />
			<zipfileset dir="${webroot}/include" prefix="include" excludes="${svn.pattern}" />
			<zipfileset dir="${webroot}/js" prefix="js" excludes="${svn.pattern}" />
			<zipfileset dir="${webroot}/images" prefix="images" excludes="${svn.pattern}" />
			<zipfileset dir="${webroot}/lib" prefix="lib" excludes="${svn.pattern}" />

			<!--
			WEB-INF sub-dirs. Don't know how to specify them under the webinf element,
			so we add them using zipfilesets instead.
			-->
			<zipfileset dir="${webinf}/content" prefix="WEB-INF/content" excludes="${svn.pattern}" />
			<zipfileset dir="${webinf}/common" prefix="WEB-INF/common" excludes="${svn.pattern}" />
			<zipfileset dir="${webinf}/demo" prefix="WEB-INF/demo" excludes="${svn.pattern}" />
			<zipfileset dir="${webinf}/error" prefix="WEB-INF/error" excludes="${svn.pattern}" />
			<zipfileset dir="${webinf}/parser" prefix="WEB-INF/parser" excludes="${svn.pattern}" />
			<zipfileset dir="${webinf}/ta" prefix="WEB-INF/ta" excludes="${svn.pattern}" />
			<zipfileset dir="${webinf}/tags" prefix="WEB-INF/tags" excludes="${svn.pattern}" />
			<zipfileset dir="${webinf}/tld" prefix="WEB-INF/tld" excludes="${svn.pattern}" />
			<zipfileset dir="${webinf}/user" prefix="WEB-INF/user" excludes="${svn.pattern}" />

			<webinf dir="${webinf}">
				<filename name="*.xml" />
				<exclude name="web.xml" />
			</webinf>

			<metainf dir="${config}/${config.name}">
				<filename name="context.xml" />
			</metainf>

		</war>
	</target>

	<!--
	###############################################################################################
	Task: deploy
	Deploys the WAR file on tomcat: copies it cover as well as the configuration's context
	file
	###############################################################################################
	-->
	<target name="deploy" depends="war">

		<!-- Stop the tomcat server -->
		<echo message="Stopping tomcat..." />
		<exec executable="${tomcat}">
			<arg value="stop" />
		</exec>

		<!-- Delete the current application directory and WAR file -->
		<delete dir="${main.container}/webapps/${ant.project.name}" />
		<delete file="${main.container}/webapps/${ant.project.name}.war" />

		<!-- Delete the Hibernate session factory info file.
		I read somewhere that it's supposed to help us get rid
		of some intermittent initialization errors of the Hibernate
		session factory that we've been seeing. -->
		<!--
		<delete file="${main.container}/work/Catalina/localhost/${ant.project.name}/SESSIONS.ser" />
		-->

		<!-- Copy WAR file to webapps dir -->
		<copy todir="${main.container}/webapps" overwrite="true">
			<fileset dir=".">
				<include name="${ant.project.name}.war" />
			</fileset>
		</copy>

		<!-- Copy context file to tomcat's conf directory -->
		<!--
		<copy file="${config}/${config.name}/context.xml" tofile="${main.container}/conf/Catalina/localhost/ru2.xml" overwrite="true" />
	-->

		<!-- Restart the tomcat server -->
		<echo message="Starting tomcat..." />
		<exec executable="${tomcat}">
			<arg value="start" />
		</exec>

	</target>

	<!--
	###############################################################################################
	Task: release
	Prepare a release directory with all files required for a configuration to work under it.
	###############################################################################################
	-->
	<target name="release" depends="war">
		<echo message="Generating release directory for configuration ${config.name}" />

		<!-- Clean release dir -->
		<delete dir="${release}_${config.name}" />

		<!-- Copy files to release dir -->
		<copy todir="${release}_${config.name}" overwrite="true">
			<fileset dir=".">
				<!-- WAR file -->
				<include name="${ant.project.name}.war" />
			</fileset>

			<!-- Config files, e.g. tomcat application context file -->
			<fileset dir="config/${config.name}" includes="*.xml,*.properties" excludes="*.config,**/_svn/**,**/.svn/**" />

			<!-- Database schema files -->
			<fileset dir="${sql}" includes="*.sql,*.ddl" />
		</copy>

	</target>

	<!-- Start the tomcat server -->
	<target name="tomcatstart">

		<echo message="Starting tomcat..." />
		<exec executable="${tomcat}">
			<arg value="start" />
		</exec>

	</target>

	<!-- Stop the tomcat server -->
	<target name="tomcatstop">

		<echo message="Stopping tomcat..." />
		<exec executable="${tomcat}">
			<arg value="stop" />
		</exec>

	</target>

	<!-- Configure files for the development server -->
	<target name="configdev">
		<exec executable="config_dev">
		</exec>
	</target>

	<!-- Print the current date and other properties of this script run -->
	<target name="print">
		<echo message="Current date is: ${today}" />
		<echo message="Ant base dir: ${basedir}" />
	</target>


	<!-- automated unit tests -->
	<target name="test" depends="build">

		<junit printsummary="yes" haltonfailure="no" fork="no" errorProperty="test.failed" failureProperty="test.failed" jvm="java -Xms128m -Xmx1024m">

			<!-- Allows this project to be run as an ant task in a different ant file -->
			<sysproperty key="basedir" value="${basedir}" />

			<classpath refid="classpath.base" />
			<classpath refid="classpath.tools" />

			<formatter type="xml" />

			<batchtest todir="${reports}">
				<fileset dir="${src}">
					<include name="test/**/Test*.java" />
					<exclude name="test/**/InactiveTest*.java" />
					<exclude name="test/**/jwebunit/*.java" />

					<!-- Classes that have similar names but are not test cases -->
					<exclude name="test/**/imports/TestEnvironment.java" />
					<exclude name="test/**/imports/TestResourceLocator.java" />
					<exclude name="test/**/rl/TestingNames.java" />
					<exclude name="test/**/Test*FromFile.java" />
					<exclude name="test/**/*TestInput.java" />
					<exclude name="test/**/*TestOutput.java" />
					<exclude name="test/**/*Test.java" />
					<exclude name="test/**/**TestBase.java" />

					<!-- Add broken tests here -->

				</fileset>
			</batchtest>

		</junit>

	</target>

	<!-- automated web application unit tests. Depends on deployment (but not explicitly) -->
	<target name="testjwebunit" depends="build">
		<!-- Make sure container is ready before we attempt to connect to it -->
		<sleep seconds="60" />

		<junit printsummary="yes" haltonfailure="no" fork="no" errorProperty="test.failed" failureProperty="test.failed" jvm="java -Xms128m -Xmx1024m">
			<!-- Allows this project to be run as an ant task in a different ant file -->
			<sysproperty key="basedir" value="${basedir}" />

			<classpath refid="classpath.base" />
			<classpath refid="classpath.tools" />

			<formatter type="xml" />

			<batchtest todir="${reports}">
				<fileset dir="${src}">
					<include name="test/**/jwebunit/**/WebTest*.java" />

					<!-- Classes that have similar names but are not test cases -->
					<exclude name="test/**/Test*FromFile.java" />
					<exclude name="test/**/*TestInput.java" />
					<exclude name="test/**/*TestOutput.java" />
					<exclude name="test/**/*Test.java" />
					<exclude name="test/**/**TestBase.java" />

					<!-- Add broken tests here -->

				</fileset>
			</batchtest>

		</junit>

	</target>

	<!-- automated web application unit tests. Depends on deployment (but not explicitly) -->
	<target name="testcustom" depends="build">

		<!-- Make sure no stale test case result files remain in the reports directory -->
		<delete dir="${reports}" />
		<mkdir dir="${reports}" />

		<junit printsummary="yes" haltonfailure="no" fork="no" errorProperty="test.failed" failureProperty="test.failed" jvm="java -Xms128m -Xmx1024m">
			<!-- Allows this project to be run as an ant task in a different ant file -->
			<sysproperty key="basedir" value="${basedir}" />

			<classpath refid="classpath.base" />
			<classpath refid="classpath.tools" />

			<formatter type="xml" />

			<batchtest todir="${reports}">
				<fileset dir="${src}">

					<!-- Add broken tests here -->
					<include name="test/**/TestVersionConflict.java" />
					<include name="test/**/TestRollBack.java" />

				</fileset>
			</batchtest>

		</junit>

	</target>

</project>
