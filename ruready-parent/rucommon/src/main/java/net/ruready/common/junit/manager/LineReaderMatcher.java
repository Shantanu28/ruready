/*****************************************************************************************
 * Source File: LineReaderMatcher.java
 ****************************************************************************************/
package net.ruready.common.junit.manager;

import net.ruready.common.junit.entity.LineReaderTarget;
import net.ruready.common.parser.core.entity.Match;
import net.ruready.common.parser.core.manager.AbstractMatcher;
import net.ruready.common.parser.core.manager.Parser;
import net.ruready.common.parser.core.tokens.TokenAssembly;
import net.ruready.common.parser.core.tokens.Tokenizer;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * This class matches test data file lines according to the syntax rules specified by
 * {@link LineReaderCompiler}.
 * <p>
 * -------------------------------------------------------------------------<br>
 * (c) 2006-2007 Continuing Education, University of Utah<br>
 * All copyrights reserved. U.S. Patent Pending DOCKET NO. 00846 25702.PROV
 * <p>
 * This file is part of the RUReady Program software.<br>
 * Contact: Nava L. Livne <code>&lt;nlivne@aoce.utah.edu&gt;</code><br>
 * Academic Outreach and Continuing Education (AOCE)<br>
 * 1901 East South Campus Dr., Room 2197-E<br>
 * University of Utah, Salt Lake City, UT 84112-9359<br>
 * U.S.A.<br>
 * Day Phone: 1-801-587-5835, Fax: 1-801-585-5414<br>
 * <br>
 * Please contact these numbers immediately if you receive this file without permission
 * from the authors. Thank you.<br>
 * -------------------------------------------------------------------------
 * 
 * @author Oren E. Livne <code>&lt;olivne@aoce.utah.edu&gt;</code>
 * @version Jul 27, 2007
 */
public class LineReaderMatcher implements AbstractMatcher
{
	// ========================= CONSTANTS =================================

	/**
	 * A logger that helps identify this class' printouts.
	 */
	@SuppressWarnings("unused")
	private static final Log logger = LogFactory.getLog(LineReaderMatcher.class);

	// ========================= FIELDS ====================================

	// -------------------------------------------------
	// Required input
	// -------------------------------------------------

	// the parser generated by the parametric evaluation compiler
	private final Parser parser = new LineReaderCompiler().parser();

	// target object; is also an output variable
	private LineReaderTarget target;

	// -------------------------------------------------
	// Output input
	// -------------------------------------------------

	// Matching statistics
	private boolean completeMatch;

	// ========================= CONSTRUCTORS ==============================

	/**
	 * Initialize an arithmetic parser from options.
	 * 
	 * @param target
	 *            current target; may be updated after matching
	 */
	public LineReaderMatcher(LineReaderTarget target)
	{
		super();
		this.target = target;
	}

	// ========================= IMPLEMENTATION: AbstractMatcher ===========

	/**
	 * @see net.ruready.common.parser.core.manager.AbstractMatcher#match(java.lang.String)
	 */
	public void match(String s)
	{
		// Initialize and customize the tokenizer
		Tokenizer t = LineReaderCompiler.tokenizer();
		t.setString(s);
		TokenAssembly in = new TokenAssembly(t);

		// TokenAssembly copy = (TokenAssembly)in.clone();
		// while (copy.hasMoreElements()) {
		// Token token = copy.nextElement();
		// logger.debug("token " + token + " type " + token.getTtype());
		// }

		// ------------------------------------------------------------------
		// Note: The assemblers plugged into the matching process will build
		// an arithmetic target that has a syntax tree and some other fields.
		// ------------------------------------------------------------------

		// ------------------------------------------------------------------
		// Create an initial target
		// ------------------------------------------------------------------
		// Clear the evaluated string but leave the parameters intact
		target.clear();
		in.setTarget(target);

		// ------------------------------------------------------------------
		// Parse s
		// ------------------------------------------------------------------
		// logger.debug("-------------- PARAM EVAL begin -----------");
		// logger.debug("Original string: " + s);
		// logger.debug("in: " + in);
		Match out = parser.completeMatch(in);
		// logger.debug("out: " + out);
		// logger.debug("best Match: " + parser.bestMatch(in));

		// ------------------------------------------------------------------
		// Run fallbacks; set outputs
		// ------------------------------------------------------------------
		if (out != null)
		{
			// Found complete match, check for possible syntax errors detected
			// during assembly. If there are errors, out.getTarget() may return
			// null.

			if (out.hasErrors())
			{
				completeMatch = false;
			}

			// No syntax errors. Matching succeeded.
			completeMatch = true;
			target = (LineReaderTarget) out.getTarget();
		}
		else
		{
			completeMatch = false;
		}

		// logger.debug("Final target: " + target);
		// logger.debug("-------------- PARAM EVAL end -------------");
	}

	// ========================= METHODS ===================================

	/**
	 * Return the evaluated string.
	 * 
	 * @return the the evaluated string
	 */
	public String getEvaluatedString()
	{
		return target.toString();
	}

	// ========================= GETTERS & SETTERS =========================

	/**
	 * @return the target
	 */
	public LineReaderTarget getTarget()
	{
		return target;
	}

	/**
	 * @return the completeMatch
	 */
	public boolean isCompleteMatch()
	{
		return completeMatch;
	}
}
