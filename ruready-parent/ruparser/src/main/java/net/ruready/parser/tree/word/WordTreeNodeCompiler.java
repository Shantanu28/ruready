/*******************************************************************************
 * Source File: WordTreeNodeCompiler.java
 ******************************************************************************/
package net.ruready.parser.tree.word;

import net.ruready.common.tree.ListTreeNode;
import net.ruready.parser.math.entity.SyntaxTreeNode;
import net.ruready.parser.tree.assembler.TargetExpressionAssembler;
import net.ruready.parser.tree.exports.AbstractTreeNodeCompiler;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * This class provides a parser that recognizes a string generated by
 * {@link SyntaxTreeNode#toString()}, and reconstructs the
 * {@link SyntaxTreeNode} object. symbols. The grammar rules are:
 * <p>
 * <code>
 *   tree  = data Names.TREE.BRACKET_OPEN tree* Names.TREE.BRACKET_CLOSE;
 *   data  = value | markedData;
 *   markedData = value Names.TREE.SEPARATOR status;
 *   value = Word;
 * </code>
 * To make sure that the parenthesis token is not broken into two tokens, a
 * custom tokenizer is used.
 * 
 * @author Nava L. Livne <i>&lt;nlivne@aoce.utah.edu&gt;</i> Academic Outreach and
 *         Continuing Education (AOCE) 1901 East South Campus Dr., Room 2197-E
 *         University of Utah, Salt Lake City, UT 84112
 * @author Oren E. Livne <i>&lt;olivne@aoce.utah.edu&gt;</i> AOCE, Room 2197-E,
 *         University of Utah University of Utah, Salt Lake City, UT 84112 (c) 
 *         2006-07 Continuing Education , University of Utah . All copyrights
 *         reserved. U.S. Patent Pending DOCKET NO. 00846 25702.PROV
 * @version May 28, 2007
 */
class WordTreeNodeCompiler extends
		AbstractTreeNodeCompiler<String, ListTreeNode<String>>
{
	// ========================= CONSTANTS =================================

	/**
	 * A logger that helps identify this class' printouts.
	 */
	@SuppressWarnings("unused")
	private static final Log logger =
			LogFactory.getLog(WordTreeNodeCompiler.class);

	// ========================= FIELDS ====================================

	// -------------------------------------------------
	// Required input
	// -------------------------------------------------
	// Parser control options; currently not in use
	// private ParserOptions options;

	// ========================= CONSTRUCTORS ==============================

	/**
	 * Initialize a tree string parser from options.
	 * 
	 * @param options
	 *            control options object
	 */
	public WordTreeNodeCompiler(
	/* ParserOptions options, */)
	{
		super(new WordTreeNodeDataCompiler().parser(), new DataAssembler(),
				new TargetExpressionAssembler());
	}

	// ========================= METHODS ===================================

}
