/*****************************************************************************************
 * Source File: MathMLOutputPort.java
 ****************************************************************************************/
package net.ruready.parser.port.output.mathml.exports;

import net.ruready.common.chain.RequestHandler;
import net.ruready.common.rl.CommonNames;
import net.ruready.common.text.TextUtil;
import net.ruready.parser.port.output.exports.ParserRawOutputPort;
import net.ruready.parser.port.output.mathml.entity.MathParser2MathMLConverter;
import net.ruready.parser.rl.ParserNames;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * A parser output port that converts a parser input string into MathML content.
 * <p>
 * -------------------------------------------------------------------------<br>
 * (c) 2006-2007 Continuing Education, University of Utah<br>
 * All copyrights reserved. U.S. Patent Pending DOCKET NO. 00846 25702.PROV
 * <p>
 * This file is part of the RUReady Program software.<br>
 * Contact: Nava L. Livne <code>&lt;nlivne@aoce.utah.edu&gt;</code><br>
 * Academic Outreach and Continuing Education (AOCE)<br>
 * 1901 East South Campus Dr., Room 2197-E<br>
 * University of Utah, Salt Lake City, UT 84112<br>
 * -------------------------------------------------------------------------
 * 
 * @author Oren E. Livne <code>&lt;olivne@aoce.utah.edu&gt;</code>
 * @version Aug 26, 2007
 */
public class MathMLOutputPort extends ParserRawOutputPort
{
	// ========================= CONSTANTS =================================

	/**
	 * A logger that helps identify this class' printouts.
	 */
	@SuppressWarnings("unused")
	private static final Log logger = LogFactory.getLog(MathMLOutputPort.class);

	// ========================= FIELDS ====================================

	// MathML output string generated by this converter
	private String mathMLString;

	// ========================= CONSTRCUTORS ==============================

	/**
	 * Initialize a parser-input-string-to-MathML-content-converter port handler.
	 * 
	 * @param attributeNameOutput
	 *            attribute name of the output stream constructed by the printer
	 */
	public MathMLOutputPort(String attributeNameOutput)
	{
		super(attributeNameOutput);
	}

	/**
	 * Initialize a parser-input-string-to-MathML-content-converter port handler.
	 * 
	 * @param attributeNameOutput
	 *            attribute name of the output stream constructed by the printer
	 * @param nextNode
	 *            The next node in the chain. If <code>null</code>, the request
	 *            processing chain will terminate after this handler handles the request.
	 */
	public MathMLOutputPort(String attributeNameOutput, RequestHandler nextNode)
	{
		super(attributeNameOutput, nextNode);
	}

	// ========================= IMPLEMENTATION: RequestHandler ============

	/**
	 * Returns the name of this handler.
	 * 
	 * @return the name of this handler.
	 */
	@Override
	public String getName()
	{
		return ParserNames.HANDLER.PORT.OUTPUT + CommonNames.MISC.TAB_CHAR + "MathML";
	}

	// ========================= IMPLEMENTATION: ParserRawOutputPort =======

	/**
	 * @see net.ruready.parser.port.output.exports.ParserRawOutputPort#processInputString(java.lang.String)
	 */
	@Override
	protected void processInputString(String inputString)
	{
		// If this is a null or empty string, return an empty, non-null string
		if (TextUtil.isEmptyTrimmedString(inputString))
		{
			mathMLString = CommonNames.MISC.EMPTY_STRING;
			return;
		}
		MathParser2MathMLConverter converter = new MathParser2MathMLConverter(this
				.getOptions());
		mathMLString = converter.convert(inputString);
	}

	/**
	 * @see net.ruready.parser.port.output.exports.ParserOutputPort#getOutput()
	 */
	@Override
	protected Object getOutput()
	{
		return mathMLString;
	}
}
