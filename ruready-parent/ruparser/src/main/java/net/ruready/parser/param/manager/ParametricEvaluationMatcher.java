/*****************************************************************************************
 * Source File: ParametricEvaluationMatcher.java
 ****************************************************************************************/
package net.ruready.parser.param.manager;

import net.ruready.common.parser.core.entity.Match;
import net.ruready.common.exception.InternationalizableErrorMessage;
import net.ruready.common.parser.core.manager.AbstractMatcher;
import net.ruready.common.parser.core.manager.Parser;
import net.ruready.common.parser.core.tokens.TokenAssembly;
import net.ruready.common.parser.core.tokens.Tokenizer;
import net.ruready.common.pointer.PubliclyCloneable;
import net.ruready.parser.options.exports.ParserOptions;
import net.ruready.parser.param.entity.ParametricEvaluationTarget;
import net.ruready.parser.service.exception.MathParserException;
import net.ruready.parser.service.exports.ParserRequest;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * This class provides a parser that parsers arithmetic expressions according to the
 * syntax rules specified by {@link ParametricEvaluationCompiler}.
 * <p>
 * -------------------------------------------------------------------------<br>
 * (c) 2006-2007 Continuing Education, University of Utah<br>
 * All copyrights reserved. U.S. Patent Pending DOCKET NO. 00846 25702.PROV
 * <p>
 * This file is part of the RUReady Program software.<br>
 * Contact: Nava L. Livne <code>&lt;nlivne@aoce.utah.edu&gt;</code><br>
 * Academic Outreach and Continuing Education (AOCE)<br>
 * 1901 East South Campus Dr., Room 2197-E<br>
 * University of Utah, Salt Lake City, UT 84112-9359<br>
 * -------------------------------------------------------------------------
 * 
 * @author Oren E. Livne <code>&lt;olivne@aoce.utah.edu&gt;</code>
 * @version Aug 26, 2007
 */
public class ParametricEvaluationMatcher implements AbstractMatcher
{
	// ========================= CONSTANTS =================================

	/**
	 * A logger that helps identify this class' printouts.
	 */
	@SuppressWarnings("unused")
	private static final Log logger = LogFactory
			.getLog(ParametricEvaluationMatcher.class);

	// ========================= FIELDS ====================================

	// -------------------------------------------------
	// Required input
	// -------------------------------------------------
	// Parser request containing
	private final ParserRequest request;

	// the parser generated by the parametric evaluation compiler
	private final Parser parser;

	// -------------------------------------------------
	// Convenient local variables
	// -------------------------------------------------
	// Parser control options
	private final ParserOptions options;

	// -------------------------------------------------
	// Output input
	// -------------------------------------------------
	// target object
	private ParametricEvaluationTarget target;

	// Matching statistics
	private boolean completeMatch;

	// ========================= CONSTRUCTORS ==============================

	/**
	 * Initialize an arithmetic parser from options.
	 * 
	 * @param options
	 *            control options object
	 * @param parser
	 *            the parser generated by the arithmetic compiler
	 */
	public ParametricEvaluationMatcher(final ParserRequest request, final Parser parser)
	{
		super();
		this.request = request;
		this.options = request.getOptions();
		this.parser = parser;
	}

	// ========================= METHODS ===================================

	/**
	 * Parse (match) an expression from in a string. The resulting variable values are
	 * inside the returned target object.
	 * 
	 * @param s
	 *            the string to parse.
	 * @throws MathParserException
	 *             if this parser does not recognize the given string as a valid
	 *             expression.
	 */
	public void match(String s)
	{
		// Initialize and customize the tokenizer
		Tokenizer t = ParametricEvaluationCompiler.tokenizer();
		t.setString(s);
		TokenAssembly in = new TokenAssembly(t);

		// ------------------------------------------------------------------
		// Note: The assemblers plugged into the matching process will build
		// an arithmetic target that has a syntax tree and some other fields.
		// ------------------------------------------------------------------

		// ------------------------------------------------------------------
		// Create an initial target.
		// ------------------------------------------------------------------
		// There's a scope here so that the "target" variable cannot be used
		// further in this function and get confused with the
		// "target" field.
		{
			// Create a target from request
			PubliclyCloneable initialTarget = new ParametricEvaluationTarget(request,
					options.getVariables());
			in.setTarget(initialTarget);
		}

		// ------------------------------------------------------------------
		// Parse s
		// ------------------------------------------------------------------
		logger.debug("-------------- PARAM EVAL begin -----------");
		logger.debug("Original string: " + s);
		logger.debug("in: " + in);
		Match out = parser.completeMatch(in);
		logger.debug("out: " + out);

		// ------------------------------------------------------------------
		// Run fallbacks; set outputs
		// ------------------------------------------------------------------
		if (out != null)
		{
			// Found complete match, check for possible syntax errors detected
			// during assembly. If there are errors, out.getTarget() may return
			// null.

			if (out.hasErrors())
			{
				completeMatch = false;
				// Exception during matching, throw an exception describing
				// the cause of failure
				InternationalizableErrorMessage error = out.getFirstSyntaxErrorMessage();
				logger.debug("Found syntax errors: " + out.getFirstSyntaxErrorMessage());
				throw new MathParserException(s, error);
			}

			// No syntax errors. Matching succeeded.
			completeMatch = true;
			target = (ParametricEvaluationTarget) out.getTarget();
		}
		else
		{
			completeMatch = false;
			final String errorMessage = "Illegal parametric string";
			logger.debug(errorMessage);
			throw new MathParserException(s, errorMessage);
		}

		// Post-processing
		if ((target != null) && (!completeMatch))
		{
			target.setLegal(false);
		}

		logger.debug("Evaluated string: " + target);
		logger.debug("-------------- PARAM EVAL end -------------");
	}

	// ========================= METHODS ===================================

	/**
	 * Return the evaluated string.
	 * 
	 * @return the the evaluated string
	 */
	public String getEvaluatedString()
	{
		return target.toString();
	}

	// ========================= GETTERS & SETTERS =========================

	/**
	 * @return the target
	 */
	public ParametricEvaluationTarget getTarget()
	{
		return target;
	}

	/**
	 * @return the completeMatch
	 */
	public boolean isCompleteMatch()
	{
		return completeMatch;
	}
}
