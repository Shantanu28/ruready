/*****************************************************************************************
 * Source File: ParametricEvaluationMatcher.java
 ****************************************************************************************/
package net.ruready.parser.arithmetic.manager;

import java.util.ArrayList;

import net.ruready.common.parser.core.entity.Match;
import net.ruready.common.exception.InternationalizableErrorMessage;
import net.ruready.common.parser.core.manager.AbstractMatcher;
import net.ruready.common.parser.core.manager.Parser;
import net.ruready.common.parser.core.tokens.Tokenizer;
import net.ruready.common.rl.CommonNames;
import net.ruready.parser.math.entity.MathTarget;
import net.ruready.parser.math.entity.SyntaxTreeNode;
import net.ruready.parser.options.exports.ParserOptions;
import net.ruready.parser.service.exception.MathParserException;
import net.ruready.parser.tokenizer.entity.MathAssembly;
import net.ruready.parser.tokenizer.manager.MathTokenizer;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * This class provides a parser that parsers arithmetic expressions according to
 * the syntax rules specified by {@link SimpleWordTreeNodeCompiler}.
 * <p>
 * The target object is a syntax tree of the expression. The nodes of the tree
 * are &quot;math tokens&quot;, representing mathematical operations, constants
 * and numbers.
 * <p>
 * -------------------------------------------------------------------------<br>
 * (c) 2006-2007 Continuing Education, University of Utah<br>
 * All copyrights reserved. U.S. Patent Pending DOCKET NO. 00846 25702.PROV
 * <p>
 * This file is part of the RUReady Program software.<br>
 * Contact: Nava L. Livne <code>&lt;nlivne@aoce.utah.edu&gt;</code><br>
 * Academic Outreach and Continuing Education (AOCE)<br>
 * 1901 East South Campus Dr., Room 2197-E<br>
 * University of Utah, Salt Lake City, UT 84112-9359<br>
 * U.S.A.<br>
 * Day Phone: 1-801-587-5835, Fax: 1-801-585-5414<br>
 * <br>
 * Please contact these numbers immediately if you receive this file without
 * permission from the authors. Thank you.<br>
 * -------------------------------------------------------------------------
 * 
 * @author Oren E. Livne <code>&lt;olivne@aoce.utah.edu&gt;</code>
 * @version Aug 16, 2007
 */
public class ArithmeticMatcher implements AbstractMatcher
{
	// ========================= CONSTANTS =================================

	/**
	 * A logger that helps identify this class' printouts.
	 */
	@SuppressWarnings("unused")
	private static final Log logger = LogFactory
			.getLog(ArithmeticMatcher.class);

	// ========================= FIELDS ====================================

	// -------------------------------------------------
	// Required input
	// -------------------------------------------------
	// Parser control options
	private ParserOptions options;

	// the parser generated by the arithmetic compiler
	private Parser parser;

	// -------------------------------------------------
	// Output input
	// -------------------------------------------------
	// target object
	private MathTarget arithmeticTarget;

	// Matching statistics
	private boolean completeMatch;

	// ========================= CONSTRUCTORS ==============================

	/**
	 * Initialize an arithmetic parser from options.
	 * 
	 * @param options
	 *            control options object
	 * @param parser
	 *            the parser generated by the arithmetic compiler
	 */
	public ArithmeticMatcher(ParserOptions options, Parser parser)
	{
		super();
		this.options = options;
		this.parser = parser;
	}

	// ========================= METHODS ===================================

	/**
	 * Parse (match) an expression from in a string. The resulting variable
	 * values are inside the returned target object.
	 * 
	 * @param s
	 *            the string to parse.
	 * @throws MathParserException
	 *             if this parser does not recognize the given string as a valid
	 *             expression.
	 */
	public void match(String s)
	{
		// Initialize and customize the tokenizer
		Tokenizer t = new MathTokenizer(options.getVariableNames(), options
				.getArithmeticMode());
		t.setString(s);
		MathAssembly in = new MathAssembly(t);

		// ------------------------------------------------------------------
		// Note: The assemblers plugged into the matching process will build
		// an arithmetic target that has a syntax tree and some other fields.
		// ------------------------------------------------------------------

		// Initialize the target with a syntax tree containing input parser
		// options. The root node data is fictitious and will be removed by
		// assemblers, but they still use (and possibly update, hence we clone)
		// the options provided here.
		{
			// There's a scope so that the "target" variable cannot be used
			// further in this function and get confused with the
			// "arithmeticTarget" field.
			MathTarget initialTarget = new MathTarget(options, in
					.toTokenArray(), new SyntaxTreeNode(null));
			in.setTarget(initialTarget);
		}

		// Parse s
		logger.debug("-------------- PARSING begin --------------");
		logger.debug("s = " + s);
		logger.debug("in = " + in + " tokens " + in.toTokenArray());
		logger.debug("options " + options);
		Match out = parser.completeMatch(in);
		logger.debug("out = " + out);

		if (out != null)
		{
			// Found complete match, check for possible syntax errors detected
			// during assembly. If there are errors, out.getTarget() may return
			// null.

			if (out.hasErrors())
			{
				completeMatch = false;
				// Exception during matching, throw an exception describing
				// the cause of failure
				InternationalizableErrorMessage error = out
						.getFirstSyntaxErrorMessage();
				logger.debug("Found syntax errors: " + error.getMessage());
				throw new MathParserException(s, error);
			}

			// OK, no syntax errors during matching. Fetch the target and
			// check it for syntax errors during assembly.
			arithmeticTarget = (MathTarget) out.getTarget();
			if (arithmeticTarget.hasErrors())
			{
				completeMatch = false;
				// Exception during assembly, throw an exception describing
				// the cause of failure
				InternationalizableErrorMessage error = arithmeticTarget
						.getFirstSyntaxErrorMessage();
				logger.debug("Found syntax errors: " + error.getMessage());
				throw new MathParserException(s, error);
			}

			// No syntax errors. Matching succeeded.
			completeMatch = true;
		}
		else
		{
			// Fall back to best match in case of an incomplete match. Should
			// not throw any exceptions.
			out = parser.bestMatch(in);
			
			InternationalizableErrorMessage error = null;
			if (out == null)
			{
				// No match found
				out = new Match(in,
						new ArrayList<InternationalizableErrorMessage>());
				arithmeticTarget = null;
				return;
			}
			else if (out.hasErrors())
			{
				// Exception during matching, throw an exception describing
				// the cause of failure.
				completeMatch = false;
				error = out.getFirstSyntaxErrorMessage();
				logger.debug("Found syntax errors: " + error.getMessage());
			}
			if (!options.isMatcherFallBack() && (error != null))
			{
				throw new MathParserException(s, error);
			}

			// Post processing for best match
			arithmeticTarget = (MathTarget) out.getTarget();
			completeMatch = false;
		}

		logger.debug(CommonNames.MISC.NEW_LINE_CHAR
				+ arithmeticTarget.toStringDetailed());
		logger.debug("-------------- PARSING end   --------------");
	}

	// ========================= GETTERS & SETTERS =========================

	/**
	 * @return the arithmeticTarget
	 */
	public MathTarget getTarget()
	{
		return arithmeticTarget;
	}

	/**
	 * @return the completeMatch
	 */
	public boolean isCompleteMatch()
	{
		return completeMatch;
	}
}
