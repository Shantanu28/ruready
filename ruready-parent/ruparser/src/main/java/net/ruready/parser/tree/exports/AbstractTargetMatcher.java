/*****************************************************************************************
 * Source File: AbstractTargetMatcher.java
 ****************************************************************************************/
package net.ruready.parser.tree.exports;

import net.ruready.common.parser.core.entity.Match;
import net.ruready.common.parser.core.manager.AbstractCompiler;
import net.ruready.common.parser.core.manager.AbstractMatcher;
import net.ruready.common.parser.core.manager.Parser;
import net.ruready.common.parser.core.tokens.Tokenizer;
import net.ruready.parser.math.entity.MathTarget;
import net.ruready.parser.math.entity.SyntaxTreeNode;
import net.ruready.parser.options.exports.ParserOptions;
import net.ruready.parser.service.exception.MathParserException;
import net.ruready.parser.tokenizer.entity.MathAssembly;
import net.ruready.parser.tokenizer.manager.MathTokenizer;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * An abstraction base class for classes that run a compiler and a matcher to parse an
 * input String into a syntax tree. Creates and manipulates an arithmetic target for this
 * purpose.
 * <p>
 * -------------------------------------------------------------------------<br>
 * (c) 2006-2007 Continuing Education, University of Utah<br>
 * All copyrights reserved. U.S. Patent Pending DOCKET NO. 00846 25702.PROV
 * <p>
 * This file is part of the RUReady Program software.<br>
 * Contact: Nava L. Livne <code>&lt;nlivne@aoce.utah.edu&gt;</code><br>
 * Academic Outreach and Continuing Education (AOCE)<br>
 * 1901 East South Campus Dr., Room 2197-E<br>
 * University of Utah, Salt Lake City, UT 84112-9359<br>
 * U.S.A.<br>
 * Day Phone: 1-801-587-5835, Fax: 1-801-585-5414<br>
 * <br>
 * Please contact these numbers immediately if you receive this file without permission
 * from the authors. Thank you.<br>
 * -------------------------------------------------------------------------
 * 
 * @author Oren E. Livne <code>&lt;olivne@aoce.utah.edu&gt;</code>
 * @version Sep 8, 2007
 */
public class AbstractTargetMatcher implements AbstractMatcher
{
	// ========================= CONSTANTS =================================

	/**
	 * A logger that helps identify this class' printouts.
	 */
	@SuppressWarnings("unused")
	private static final Log logger = LogFactory.getLog(AbstractTargetMatcher.class);

	// ========================= FIELDS ====================================

	// -------------------------------------------------
	// Required input
	// -------------------------------------------------
	// Parser control options
	private final ParserOptions options;

	// -------------------------------------------------
	// Convenient local variables
	// -------------------------------------------------

	// the parser generated by the compiler
	private Parser parser;

	// -------------------------------------------------
	// Output input
	// -------------------------------------------------
	// target object
	private MathTarget target;

	// Matching statistics
	private boolean completeMatch;

	// ========================= CONSTRUCTORS ==============================

	/**
	 * Initialize a tree string matcher from options.
	 * 
	 * @param options
	 *            control options object
	 * @param compiler
	 *            Compiler to prepare the parser used by the matcher
	 */
	public AbstractTargetMatcher(final ParserOptions options,
			final AbstractCompiler compiler)
	{
		super();
		this.options = options;
		this.parser = compiler.parser();
	}

	// ========================= METHODS ===================================

	/**
	 * Parse (match) an expression from in a string. The resulting variable values are
	 * inside the returned target object.
	 * 
	 * @param s
	 *            the string to parse.
	 * @throws MathParserException
	 *             if this parser does not recognize the given string as a valid
	 *             expression.
	 */
	public final void match(String s)
	{
		// Initialize and customize the tokenizer
		Tokenizer t = new MathTokenizer(options.getVariableNames(), options
				.getArithmeticMode());
		// Tokenizer t = new TreeTokenizer(new TreeSymbolState());
		t.setString(s);
		MathAssembly in = new MathAssembly(t);

		// ---------------------------------------------------------------
		// Note: The assemblers plugged into the matching process will build
		// a syntax tree (class of type SyntaxTreeNode). After it is built,
		// we insert it into an SyntaxTreeNode object with a copy of the
		// list of tokens in the parsed string.
		// ---------------------------------------------------------------

		// Initialize syntax tree's options from the parser's input options.
		// The root node is fictitious and will be removed by assemblers.
		// Note: we make a copy of the input options reference
		{
			// There's a scope so that the "target" variable cannot be used
			// further in this function and get confused with the
			// "arithmeticTarget" field.
			MathTarget initialTarget = new MathTarget(options, in.toTokenArray(),
					new SyntaxTreeNode(null));
			in.setTarget(initialTarget);
		}

		// Parse s
		logger.debug("--------- PARSING begin ---------");
		logger.debug("s = " + s);
		logger.debug("in = " + in + " tokens " + in.toTokenArray());
		Match out = parser.completeMatch(in);
		logger.debug("out " + out);

		if (out != null)
		{
			// Found complete match
			completeMatch = true;
			target = (MathTarget) out.getTarget();
		}
		else
		{
			completeMatch = false;
			logger.error("Unrecognized tree string, running best match");
			out = parser.bestMatch(in);
			logger.debug("in " + in + " out " + out);
			throw new MathParserException(s, "Unrecognized tree string");
		}

		logger.debug("completeMatch = " + completeMatch);
		logger.debug("target = " + target);
		logger.debug("--------- PARSING end -----------");
	}

	/**
	 * @return the target
	 */
	public final SyntaxTreeNode getSyntax()
	{
		return (target == null) ? null : target.getSyntax();
	}

	// ========================= GETTERS & SETTERS =========================

	/**
	 * @return the completeMatch
	 */
	public final boolean isCompleteMatch()
	{
		return completeMatch;
	}
}
