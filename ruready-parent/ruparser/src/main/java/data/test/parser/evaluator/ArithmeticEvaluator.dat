//======================================================================
// Arithmetic Evaluation Regression Tests - Data File
//======================================================================
// Allowed variables are "x", "y", "z", whose numerical values must be
// declared according to the test case format below. Because compilation
// is done prior to processing test cases, no other variables are allowed
// although values may be different for different test cases.
//
// Each test is two-line group:
// Line 1 format:
//		input expression
// OR	input expression | [var1:value1 ... varn:valuen]
//
// Line 2: numerical value of the expression
//======================================================================

//==================== Testing options =================================
// Format: $ parameterName = parameterValue
// Note: names and values are case-sensitive!

// $ stopOnFirstError = true

//==================== Tests that fail =================================

//==================== Plus ============================================

1+1
2

1+1+1+1+1+1+1+1
8

1+(1+(1+(1)))
4

//==================== Minus ===========================================

1-1
0

1-1-1
-1

1-(1-1)
1

//==================== Times ===========================================

0*1
0

1*2
2

2*1
2

//==================== Divide ==========================================

4/2
2

1/2-0.5
0

//==================== Modulus =========================================

1 % 2
1

0 % 3
0

3 % 2
1

//==================== Power ===========================================

1^2
1

2^2
4

1^0
1

2^0
1

1^-1
1

2^-1
0.5

0^1
0

//==================== 'Correct' precedence of unary - and ^ ===========
-1^2
-1

(-1)^2
1


//==================== Constant: pi ====================================

sin(pi)
0

pi*sin(0)
0

cos(pi)
-1

cos(pi/2)
0

//==================== Function: sine ==================================

sin(0)
0

sin(pi/2)
1

sin(pi)
0

sin(3*pi/2)
-1

sin(pi/6)
0.5

sin(pi/3)
0.86602540378443864676372317075294

//==================== Function: cosine ================================

cos(0)
1

cos(pi/2)
0

cos(pi)
-1

cos(3*pi/2)
0

cos(pi/6)
0.86602540378443864676372317075294

cos(pi/3)
0.5

//==================== Function: tangent ===============================

tan(0)
0

tan(pi)
0

//==================== Function: arcsine ===============================

arcsin(0)
0

arcsin(1)
1.5707963267948966192313216916398

arcsin(-1)
-1.5707963267948966192313216916398

//==================== Function: arccosine =============================

arccos(0)
1.5707963267948966192313216916398

arccos(1)
0

arccos(-1)
3.1415926535897932384626433832795

//==================== Function: arctangent ============================

// Inverse Tangent
arctan(0)
0

arctan(1)
0.78539816339744830961566084581988

arctan(-1)
-0.78539816339744830961566084581988

//atan2(0, 0)
//0

//atan2(1, 0)
//1.5707963267948966192313216916398

//atan2(0, 1)
//0

//atan2(-1, 0)
//-1.5707963267948966192313216916398

//atan2(0, -1)
//3.1415926535897932384626433832795

//==================== Logarithmic functions ===========================

ln(1)
0

ln(e)
1

ln(e^32)
32

log(1)
0

// log of one argument is base-10 log
log(10)
1

log(100)
2

//==================== Complex-valued functions ========================

//==================== Function : exponent =============================

exp(0)
1

exp(1)
2.718281828459045

exp(2)
7.38905609893065

//==================== Function : absolute value =======================

abs(-1)
1

abs(1)
1

abs(0)
0

//abs(i)
//1
//
//abs(2*i)
//2
//
//abs(i+1)
//sqrt(2)

//==================== Function : rand =================================

//==================== Function : mod ==================================

rem(11,10)
1

rem(1,2)
1

rem(1,5)
1

//==================== Function : square root ==========================

sqrt(1)
1

sqrt(0)
0

//sqrt(-1)
//i

sqrt(25)
5

//==================== Function : sum ==================================

//==================== Large expressions ===============================

// @todo: add more such expressions here

1+1*2-(1+1*2)+1+1*2-(1+1*2)+1+1*2-(1+1*2)+1+1*2-(1+1*2)+1+1*2-(1+1*2)
0

//==================== Implicit multiplication =========================

1 2 3
6

3sin(0)
0

sin(0)3
0

sin(3 sin(0))
0

//==================== Multiple signs ==================================

--1
1

+-1
-1

-+1
-1

++1
1

+++1
1

---1
-1

----+++--++1+2
3

//==================== Parentheses =====================================

(1+1)
2

3*(5+7)
36

2*(3*4)
24

//==================== Boolean operators ===============================

//==================== Function : if ===================================

//==================== String functions ================================
// (need to use == operator in one line and compare
// to value because JEPTester does not handle String
// results)

//==================== Symbolic substitution ===========================

x+y | x:1 y:2
3

x^z | x:2 z:3
8

//==================== Arithmetic mode: complex ========================

@c@-2*i
0-2i

@c@+2*i
0+2i

@c@2
2

@c@-2
-2

//==================== Arithmetic mode: real ===========================

@d@3.0
3.0

@3d@3.5701
3.57

// From R1/Intermediate Algebra/QID 756. The evaluation result was
// -0.000000000000001776 instead of 0.
@12d@-0.000000000000001776
0.0

//==================== Arithmetic mode: rational =======================

@q@3/4
0.75

//==================== Arithmetic mode: integer ========================

@i@3.5
4
