//======================================================================
// Arithmetic Matching Syntax Tree Structure Regression Tests - Data File
//======================================================================
// The allowed variables in all expressions are
// "x", "y", "z".
// Each test is two-line group:
// Line 1: input expression
// Line 2: expression syntax tree's string representation
//======================================================================

//==================== Testing options =================================
// Format: $ parameterName = parameterValue
// Note: names and values are case-sensitive!

$ stopOnFirstError = true

//==================== Tests that fail =================================

i
C$i$D { }

//==================== Single elements =================================

1
N$1$D { }

1.5
N$1.5$D { }

//==================== Binary operations ===============================

1+2
BOP$+$D { N$1$D { } N$2$D { } }

//==================== Binary and unary +/- operations =================

+1+2
BOP$+$D { UOP$+$D { N$1$D { } } N$2$D { } }

+1-2
BOP$-$D { UOP$+$D { N$1$D { } } N$2$D { } }

-1+2
BOP$+$D { UOP$-$D { N$1$D { } } N$2$D { } }

-1-2
BOP$-$D { UOP$-$D { N$1$D { } } N$2$D { } }

//==================== Binary and unary *// operations =================
-1*2
BOP$*$D { UOP$-$D { N$1$D { } } N$2$D { } }

//==================== Multiple occurances of binary operations ========

1+2+3
BOP$+$D { BOP$+$D { N$1$D { } N$2$D { } } N$3$D { } }

//==================== Implicit multiplication =========================

1 2 3
BOP$*$D { BOP$*$D { N$1$D { } N$2$D { } } N$3$D { } }

//==================== Complex arithmetic ==============================

i
C$i$D { }

j
C$j$D { }
