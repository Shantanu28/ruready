//################################################################
// An ExtJS tree widget that mirrors the content management item 
// hierarchy. Used by the explorer view of CurEdit
//################################################################

/**
 * Open an AJAX connection, send the item's ID and populate the
 * content division with an item view HTML (generated by a JSP
 * on the server, which is a forward action of the Struts action we 
 * call here).
 *
 * @param node - node whose content is loaded
 * @param itemId - node ID parameter to pass into the AJAX action
 * @param itemType - node item type to pass into the AJAX action (optional)
 * @param options tree UI options struct
 */
function loadContent(node, itemId, itemType, options)
{
	var conn = new Ext.data.Connection();
    	conn.request({
			url: options.contentUrl,
			method: 'POST',
			params: { itemId: itemId, itemType: itemType },
	        callback: function(param, success, responseObject) 
			{
	        	// Populate the content div element
	            var content = Ext.get(options.content_element);
	            content.dom.innerHTML = responseObject.responseText;
			}
		});
}
	            
function ItemTreeUI(options)
{
    // shorthand
    var Tree = Ext.tree;
    
    return {
        init : function() {
    		
    		//================= Tree loader =================
    		
    		var treeLoader = new Tree.TreeLoader({dataUrl: options.nodeUrl});
    		
    		// Pass the appropriate request parameters to AJAX node load action
    		treeLoader.on("beforeload", function(loader, node) {
       			loader.baseParams.action_root = ((node.attributes.root == null) ? false : node.attributes.root);
       			loader.baseParams.itemId = node.attributes.initItemId;
    		}, this);

    		//================= Main yui-ext tree ===========

            var tree = new Tree.TreePanel({
                el: options.target_element,
                animate: true, 
                autoScroll: true,
                loader: treeLoader,
                enableDD: false,
                containerScroll: true,
                dropConfig: {}
            });
            
            // add a tree sorter in folder mode
            //new Tree.TreeSorter(tree, {folderSort:true});
            
            // set the root node
            var root = new Tree.AsyncTreeNode({
            	allowDrag: false,
            	allowDrop: false,
                text: options.messages.root, 
                draggable: false, // disable root node dragging
                id: -1, // Dummy
                initItemId: options.initItemId, // id of node to be loaded upon root node construction
                initType: options.initType, // item type of node to be loaded upon root node construction
                initParentId: options.initParentId, // ID of the parent node of the node to be loaded upon root node construction
                root: true
            });
            tree.setRootNode(root);
            
    		tree.on("click", function(node, e) {
				// Load node content
				loadContent(node, node.attributes.id, null, options);
    		}, this);
            
    		tree.on("load", function(node) {
    			if (node.attributes.root)
    			{
					//alert('Node attributes: itemId ' + node.attributes.initItemId + ' itemType ' + node.attributes.initItemType); 
    				var itemId = ((node.attributes.initItemId > 0) ? node.attributes.initItemId : node.attributes.initParentId);
    				var itemType = ((node.attributes.initParentId > 0) ? null : node.attributes.initItemType);
					//alert('Variables: itemId ' + itemId + ' itemType ' + itemType); 

					// Load node content upon page refresh / tree pre-population
					loadContent(node, itemId, itemType, options);
    			}
    		}, this);
               
            // render the tree
            tree.render();
            
            root.expand(false, /*no anim*/ false);
        }
    };
}
