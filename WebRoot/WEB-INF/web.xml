<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">

	<!--
		###################################################################################
		RUReady Application:
		Web application deployment descriptor
		===================================================================================
		Nava L. Livne <i>&lt;nlivne@aoce.utah.edu&gt;</i>
		Academic Outreach and Continuing Education (AOCE)
		1901 East South Campus Dr., Room 2197-E
		University of Utah, Salt Lake City, UT 84112
		
		Oren E. Livne <i>&lt;olivne@aoce.utah.edu&gt;</i>
		Academic Outreach and Continuing Education (AOCE)
		1901 East South Campus Dr., Room 2197-E
		
		(c) 2006-07 Continuing Education , University of Utah.
		All copyrights reserved. U.S. Patent Pending DOCKET NO. 00846 25702.PROV
		###################################################################################
	-->

	<!--
		========================================================
		General web app configuration
		========================================================
	-->

	<description>RUReady College Readiness Program</description>
	<display-name>RU2</display-name>

	<!-- Some people say this MIME mapping is important... -->
	<mime-mapping>
		<extension>css</extension>
		<mime-type>text/css</mime-type>
	</mime-mapping>

	<!-- 
		Session timeout (minutes). Keep it short enough to remove load from the server,
		but long enough for students that take a long time to think during their tests.
		For testing, set it to 1 to observe upon-session-destroy actions.
	-->
	<session-config>
		<session-timeout>30</session-timeout>
	</session-config>

	<!--
		A Welcome File List. Files will be attempted to be located in their
		order of appearance.
		
		Note that home.jsp contains a url redirect over to home.do.
		
		Convention for entrance to any component in ru2: 
		/WEB-INF/[component-name]/jsp/home.jsp
		- OR -
		/[component-name]/home.do
	-->
	<welcome-file-list>
		<welcome-file>/WEB-INF/common/jsp/home.jsp</welcome-file>
	</welcome-file-list>

	<!-- 
		Default error page for all exceptions not caught by other things 
		
		This is the top level exception handler. Note that modules may also define error-pages. If they don't handle 
		the exception, we end up here. 	
	-->
	<error-page>
		<exception-type>java.lang.Exception</exception-type>
		<location>/error/system.do</location>
	</error-page>

	<error-page>
		<error-code>401</error-code>
		<location>/error/accessDenied.do</location>
	</error-page>

	<error-page>
		<error-code>404</error-code>
		<location>/error/pathNotFound.do</location>
	</error-page>

	<error-page>
		<error-code>500</error-code>
		<location>/error/system.do</location>
	</error-page>

	<!--
		========================================================
		Initialization parameters
		========================================================
	-->

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/webflow-config.xml, /WEB-INF/user/user-context.xml,
			/WEB-INF/ta/ta-context.xml
		</param-value>
	</context-param>

	<!--
		========================================================
		Application-context listeners
		========================================================
	-->

	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>

	<!-- 
		Functions run on init and clean-up of the site.
		This is the full initialization procedure that should be
		run in a production envivonment.
	-->
	<listener>
		<listener-class>
			net.ruready.web.common.filter.InitListener
		</listener-class>
	</listener>

	<!--
		Fast minimal initialization for debugging purposes. Doesn't
		include catalog + user component initiailization.
	-->
	<!--
		<listener>
		<listener-class>
		net.ruready.web.common.filter.InitListenerMinimal
		</listener-class>
		</listener>
	-->

	<!-- Updating user status upon login/logout -->
	<listener>
		<listener-class>
			net.ruready.web.user.filter.UserSessionListener
		</listener-class>
	</listener>

	<!--
		========================================================
		Quartz scheduling library servlet
		========================================================
	-->
	<servlet>
		<display-name>Quartz Initializer Servlet</display-name>
		<servlet-name>QuartzInitializer</servlet-name>

		<servlet-class>
			org.quartz.ee.servlet.QuartzInitializerServlet
		</servlet-class>

		<init-param>
			<param-name>shutdown-on-unload</param-name>
			<param-value>true</param-value>
		</init-param>

		<init-param>
			<param-name>start-scheduler-on-load</param-name>
			<param-value>false</param-value>
		</init-param>

		<load-on-startup>1</load-on-startup>
	</servlet>

	<!--
		========================================================
		Open-Session-In-View Filter for the Persistence Layer
		========================================================
	-->
	<!--
		This filter handles Hibernate session opening/closing. Transactions
		are demarcated by plug-ins into the Struts request processor. This 
		allows the two-transaction variation of this pattern.
		Obsolete - we do everything inside the Struts processing chain now.
	-->

	<!-- 
		<filter>
		<filter-name>hibernateSessionRequestFilter</filter-name>
		<filter-class>
		net.ruready.web.common.filter.HibernateSessionRequestFilter
		</filter-class>
		</filter>
	-->
	<!-- 
		Filter only the Struts action servlet, and don't process
		<jsp:include>s.
		This assumes that the entire app is going through Struts.
		@see http://www.hibernate.org/43.html
		@see http://www.hibernate.org/43.612.html
	-->
	<!--
		<filter-mapping>
		<filter-name>hibernateSessionRequestFilter</filter-name>
		<servlet-name>action</servlet-name>
		<dispatcher>REQUEST</dispatcher>
		</filter-mapping>
	-->

	<!--
		========================================================
		Servlets for filtering exceptions not caught by Struts
		========================================================
	-->

	<!-- 
		<servlet>
		<servlet-name>invalidPathExceptionServlet</servlet-name>
		<servlet-class>
		net.ruready.web.common.filter.InvalidPathExceptionServlet
		</servlet-class>
		<init-param>
		<param-name>onError</param-name>
		<param-value>/error/system.do</param-value>
		</init-param>
		</servlet>
		
		<servlet-mapping>
		<servlet-name>invalidPathExceptionServlet</servlet-name>
		<url-pattern>/error/pathNotFound.do</url-pattern>
		</servlet-mapping>
	-->

	<!--
		========================================================
		Struts Action Servlet Configuration
		========================================================
	-->

	<servlet>
		<!-- ActionServlet class -->
		<servlet-name>action</servlet-name>
		<servlet-class>
			org.apache.struts.action.ActionServlet
		</servlet-class>

		<!-- Configure Struts modules right below this line -->

		<!-- 
			Default module 
			See section 5.3.2 "Informing the Controller", at http://struts.apache.org/1.x/userGuide/configuration.html for details.
			application home page and other front pages)
		-->
		<init-param>
			<param-name>config</param-name>
			<param-value>/WEB-INF/common/struts-common.xml</param-value>
		</init-param>

		<!-- Content management system: catalog sub-component module -->
		<init-param>
			<param-name>config/content</param-name>
			<param-value>
				/WEB-INF/content/struts-content.xml
			</param-value>
		</init-param>

		<!-- Stand-alone demos and examples, mostly for testing purposes -->
		<init-param>
			<param-name>config/demo</param-name>
			<param-value>/WEB-INF/demo/struts-demo.xml</param-value>
		</init-param>

		<!-- Error and exception handling module -->
		<init-param>
			<param-name>config/error</param-name>
			<param-value>/WEB-INF/error/struts-error.xml</param-value>
		</init-param>

		<!-- User management module -->
		<init-param>
			<param-name>config/user</param-name>
			<param-value>/WEB-INF/user/struts-user.xml</param-value>
		</init-param>

		<!-- Parser (demo and other functions) module -->
		<init-param>
			<param-name>config/parser</param-name>
			<param-value>/WEB-INF/parser/struts-parser.xml</param-value>
		</init-param>

		<!-- Test administration module -->
		<init-param>
			<param-name>config/ta</param-name>
			<param-value>/WEB-INF/ta/struts-ta.xml</param-value>
		</init-param>

		<init-param>
			<param-name>chainConfig</param-name>
			<param-value>chain-config.xml</param-value>
		</init-param>

		<init-param>
			<param-name>debug</param-name>
			<param-value>3</param-value>
		</init-param>

		<init-param>
			<param-name>detail</param-name>
			<param-value>3</param-value>
		</init-param>

		<load-on-startup>2</load-on-startup>
	</servlet>

	<!--
		Action URL pattern (a prefix in this case)
	-->
	<servlet-mapping>
		<servlet-name>action</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>

	<!--
		========================================================
		Servlet filters definitions
		========================================================
	-->

	<!--
		========================================================
		Tag Library Descriptors
		========================================================
	-->

	<jsp-config>
		<!--
			@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
			Our own tag libraries
			@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
		-->

		<!-- Utility Tag Library Descriptors -->
		<taglib>
			<taglib-uri>http://ruready.net/common</taglib-uri>
			<taglib-location>/WEB-INF/tld/common.tld</taglib-location>
		</taglib>

		<!-- Catalog-Component-Related-Tag Library Descriptors -->
		<taglib>
			<taglib-uri>http://ruready.net/content</taglib-uri>
			<taglib-location>/WEB-INF/tld/content.tld</taglib-location>
		</taglib>

		<!-- User-Component-Related-Tag Library Descriptors -->
		<taglib>
			<taglib-uri>http://ruready.net/user</taglib-uri>
			<taglib-location>/WEB-INF/tld/user.tld</taglib-location>
		</taglib>

		<!-- Utility tags -->
		<taglib>
			<taglib-uri>http://ruready.net/util</taglib-uri>
			<taglib-location>/WEB-INF/tld/util.tld</taglib-location>
		</taglib>

	</jsp-config>

</web-app>
